#!/usr/bin/env python3
# -*- python -*-
copyright='''
socket-relay – Socket relaying daemon
Copyright © 2014  Mattias Andrée (maandree@member.fsf.org)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
'''

import sys
import socket
import threading


PROGRAM_NAME = 'socket-relay'
PROGRAM_VERSION = '1.0'


conf = '/etc/socket-relay'


# Read command line
opt = lambda *opts : any(map(lambda x : x in sys.argv[1:], list(opts)))
if opt('-h', '--help'):
    print('USAGE: %s [-h | -c | -w | -c | SCRIPT]' % (sys.argv[0]))
    print()
    print('    -h --help                 Print this help')
    print('    -c --copying --copyright  Print copyright information')
    print('    -w --warranty             Print non-warranty information')
    print('    -v --version              Print program name and version')
    sys.exit(0)
if opt('-c', '--copying', '--copyright'):
    print(copyright[1 : -1])
    sys.exit(0)
if opt('-w', '--warranty'):
    print(copyright.split('\n\n')[2])
    sys.exit(0)
if opt('-v', '--version'):
    print('%s %s' % (PROGRAM_NAME, PROGRAM_VERSION))
    sys.exit(0)
if len(sys.argv) > 1:
    conf = sys.argv[1]



def reduce(f, items):
    '''
    https://en.wikipedia.org/wiki/Fold_(higher-order_function)
    '''
    if len(items) < 2:
        return items
    rc = items[0]
    for i in range(1, len(items)):
        rc = f(rc, items[i])
    return rc


class RelayTCP:
    '''
    TCP relay
    
    @variable  connector:(socket, address)→(socket?, fetched)
                                Function that determinate which server to connect to and connectes to it,
                                it takes a socket and remote address as input as gives a connected socket,
                                list of already received packets and thread name as output
    @variable  port:int         The TCP port to listen on
    @variable  ip:str           The IP address of the network interface
    @variable  backlog:int      The server's connection backlog
    @variable  name:str         The thread's name
    @variable  buffer_size:int  Default buffer size
    @variable  socket:socket    The socket
    @variable  thread:Thread    The thread
    '''
    
    def __init__(self, connector, port, ip = '127.0.0.1', backlog = 5, buffer_size = 4096, name = None):
        '''
        Constructor
        
        @param  connector:(socket, address)→(socket?, fetched)
                                 Function that determinate which server to connect to and connectes to it,
                                 it takes a socket and remote address as input as gives a connected socket,
                                 list of already received packets and thread name as output
        @param  port:int         The TCP port to listen on
        @param  ip:str           The IP address of the network interface
        @param  backlog:int      The server's connection backlog
        @param  name:str?        The thread's name, `None` for automatic
        @param  buffer_size:int  Default buffer size
        '''
        self.port, self.ip, self.backlog, self.buffer_size = port, ip, backlog, buffer_size
        self.name, self.connector = name, connector
        if self.name is None:
            self.name = 'TCP %s:%i' % (('[%s]' if ':' in ip else '%s') % (ip), port)
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.bind((self.ip, self.port))
        self.thread = threading.Thread(target = RelayTCP.server_function, args = (self,), name = self.name)
        self.thread.setDaemon(False)
        self.thread.start()
    
    
    @staticmethod
    def connect(remote_host, remote_port, local_ip = None, local_port = 0):
        '''
        Creates a TCP client socket connected to TCP server
        
        @param  remote_host:str  The remote host
        @param  remote_port:int  The remote port
        @param  local_ip:str?    The IP address of the network interface
        @param  local_port:int   The local port
        '''
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        if (local_ip is not None) and not (local_port == 0):
            sock.bind((local_ip, local_port))
        sock.connect((remote_host, remote_port))
        return sock
    
    
    @staticmethod
    def server_function(self):
        '''
        The server thread's main function
        '''
        self.sock.listen(self.backlog)
        
        while True:
            (server_side, address) = self.sock.accept()
            thread = threading.Thread(target = RelayTCP.proxy_function, args = (self, server_side, address))
            thread.setDaemon(False)
            thread.start()
    
    
    @staticmethod
    def proxy_function(self, server_side, address):
        '''
        The connection threads' main function
        
        @param  server_side:socket            The server-side socket
        @param  address:(host:str, port:int)  The server-side remote host and remote port
        '''
        (client_side, fetched) = self.connector(server_side, address)
        if client_side is None:
            server_side.close()
            return
        def proxy_function_():
            try:
                while True:
                    packet = server_side.recv(self.buffer_size)
                    if packet is None:
                        break
                    client_side.send(packet)
            except:
                pass
            try:     client_side.close()
            except:  pass
            try:     server_side.close()
            except:  pass
        thread = threading.Thread(target = proxy_function_)
        thread.setDaemon(False)
        thread.start()
        try:
            for packet in fetched:
                client_side.send(packet)
            while True:
                packet = client_side.recv(self.buffer_size)
                if packet is None:
                    break
                server_side.send(packet)
        except:
            pass
        try:     client_side.close()
        except:  pass
        try:     server_side.close()
        except:  pass


# Load configuration script
g, l = globals(), dict(locals())
for key in l:
    g[key] = l[key]
code = None
with open(conf, 'rb') as script:
    code = script.read()
code = code.decode('utf-8', 'error') + '\n'
code = compile(code, conf, 'exec')
exec(code, g)

